# -*- coding: utf-8 -*-
from requests.models import codes
import telebot
from telebot import types
from random import randint

import pass.py
import data.py
import funcs.py

bot = telebot.TeleBot(TOKEN)

class Definition:
    def __init__(self, word, definition):
        self.word = word
        self.definition = definition

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "üëã –í—ñ—Ç–∞—é.\n–¶–µ –±–æ—Ç –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞, —è –∑–∞–¥–∞—é –≤–∞–º –ø–∏—Ç–∞–Ω–Ω—è, –∞ –≤–∏ —Ä–∞–∑–æ–º –∑ –¥—Ä—É–∑—è–º–∏ –≤—ñ–¥–≥–∞–¥—É—î—Ç–µ!")

@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, "‚ùóÔ∏è*–ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ.*\n\n–î–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ –¥–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ —É –≤–∞—à—É –≥—Ä—É–ø—É —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å –π–æ–≥–æ –∞–¥–º—ñ–Ω–æ–º, –¥–∞–ª—ñ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /game. –•—Ç–æ —ñ –≤ —è–∫—ñ–π —á–µ—Ä–∑—ñ –±—É–¥–µ –Ω–∞–∑–∏–≤–∞—Ç–∏ –ª—ñ—Ç–µ—Ä–∏ - –º–µ–Ω—ñ –ø–æ—Ñ—ñ–∫, —è –Ω–µ –∑–Ω–∞—é —è–∫ —Ü–µ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏.\n\n*–ü–∏—à—ñ—Ç—å –º–∞–ª–µ–Ω—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏!*\n*–°–ª–æ–≤–æ —á–∏ –ª—ñ—Ç–µ—Ä—É –ø–∏—à—ñ—Ç—å –ø–æ—á–∏–Ω–∞—é—á–∏ –∑—ñ –∑–Ω–∞–∫—É \"!\"*", parse_mode="Markdown")

@bot.message_handler(commands=['game'])
def start_game(message):
    if message.chat.type != "group" and message.chat.type != "supergroup":
        bot.send_message(message.chat.id, "‚ùóÔ∏è–î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ –≥—Ä—É–ø–∏, –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤–≤–µ–¥—ñ—Ç—å /help.")
    else:
        quiz = GetRandomWord()
        global code
        code = GetHashWord(quiz.word)
        global answer
        answer = quiz.word
        bot.send_message(message.chat.id, "ü§î –ü–æ—á–Ω–µ–º–æ! –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –≥—Ä—É –∑–∞–≤—á–∞—Å–Ω–æ –Ω–∞–ø–∏—à—ñ—Ç—å /stop.\n–í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–≥–∞–¥–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ:\n*" + quiz.definition + "*\n" + code, parse_mode="Markdown")
        bot.register_next_step_handler(message, members_step)

@bot.message_handler(commands=['stop'])
def stop_help(message):
    global answer
    
    bot.send_message(message.chat.id, "–í—ñ–¥–ø–æ–≤—ñ–¥—å: " + answer)
    stop_game(message)

def stop_game(message):
    bot.send_message(message.chat.id, "‚ùóÔ∏è–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def members_step(message):
    global code
    global answer

    if message.text and message.text[0] == "!":
        if message.text[1:] == answer:
            bot.reply_to(message, "ü•≥ –¢–∞–∞–∞–∫! –ú–æ–ª–æ–¥—Ü—ñ, —Ü—å–æ–º-—Ü—å–æ–º ^^")
            stop_game(message)
        elif hasLetter(message.text[1:], answer) == True:
            code = EditHashWord(message.text[1:], code, answer)
            if hasHash(code):
                bot.reply_to(message, "–Ñ —Ç–∞–∫–µ!\n" + code)
                bot.register_next_step_handler(message, members_step)
            else:
                bot.reply_to(message, "–û—Ç–æ–∂: " + code)
                bot.send_message(message.chat.id, "ü•≥ –ù—É –æ—Ç, –≤—ñ–¥—Å—Ç—Ä—ñ–ª—è–ª–∏—Å—è, –∫—Ä–∞—Å–∞–≤–∏–∏–∏–∏–∏–∏–∏–∏")
                stop_game(message)
        else:
            bot.reply_to(message, "–ù—ñ—Ç!")
            bot.register_next_step_handler(message, members_step)
    elif message.text == "/stop@quizo_ua_bot" or message.text == "/stop":
        stop_help(message)
    else:
        bot.register_next_step_handler(message, members_step)

bot.enable_save_next_step_handlers(delay=2)
bot.load_next_step_handlers()
bot.polling()