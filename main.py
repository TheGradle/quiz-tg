# -*- coding: utf-8 -*-
from requests.models import codes
import telebot
from telebot import types
from random import randint

bot = telebot.TeleBot("1619514050:AAEmmhl52Z4NEnJlY4keTytSOisB9F2uNJg")

class Definition:
    def __init__(self, word, definition):
        self.word = word
        self.definition = definition

words = [
    Definition("–±–∞–ª–¥–∞", "–≤–µ–ª–∏–∫–∏–π –∑ –¥–æ–≤–≥–∏–º –¥–µ—Ä–∂–∞–∫–æ–º –º–æ–ª–æ—Ç"), 
    Definition("—Ä–æ–¥–∑–∏–Ω–∫–∞", "—Å—É—à–µ–Ω–∞ –≤–∏–Ω–æ–≥—Ä–∞–¥–∏–Ω–∞"), 
    Definition("—á—Ö–∞–Ω–Ω—è", "–õ—é–¥—Å—å–∫—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ –¥–æ—Å–∏—Ç—å –≤–µ–ª–∏–∫—ñ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –º–∏ –º–æ–∂–µ–º–æ –≤–ª–∞—Å–Ω–∏–º–∏ —Å–∏–ª–∞–º–∏ —Ä–æ–∑—ñ–≥–Ω–∞—Ç–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏–π –ø–æ—Ç—ñ–∫ –¥–æ 150-170 –∫–º / –≥–æ–¥. –í –ø—Ä–æ—Ü–µ—Å—ñ —á–æ–≥–æ –ª—é–¥–∏–Ω–∞ –∑–¥–∞—Ç–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫–∏–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏–π –ø–æ—Ç—ñ–∫?"),
    Definition("–ø—Ä–∞–≤–¥–∞", "–ü–æ–ª—å—Å—å–∫–∏–π –≤—á–µ–Ω–∏–π-–º–∞—Ç–µ–º–∞—Ç–∏–∫ –ì—É–≥–æ –î—ñ–æ–Ω—ñ—Å—ñ–π –®—Ç–µ–π–Ω–≥–∞—É–∑, —â–æ –ø—Ä–æ—Å–ª–∞–≤–∏–≤—Å—è —Ç–∞–∫–æ–∂ —Å–≤–æ—ó–º–∏ –∞—Ñ–æ—Ä–∏–∑–º–∞–º–∏, –≥–æ–≤–æ—Ä–∏–≤: ¬´–ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç –∂—ñ–Ω—Ü—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø—Ä–∞–≤–¥–∏–≤—ñ—à–µ, –Ω—ñ–∂ ...¬ª"),
    Definition("—Å–∫–æ–≤–æ—Ä–æ–¥–∞", "–©–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –≤ –ö–∏—Ç–∞—ó –¥–ª—è –ø—Ä–∞—Å—É–≤–∞–Ω–Ω—è –±—ñ–ª–∏–∑–Ω–∏ –∑–∞–º—ñ—Å—Ç—å –ø—Ä–∞—Å–∫–∏?"),
    Definition("–±–∞–ª–∞–∫—É—á—ñ—Å—Ç—å", "–ó–∞ —Ç—Ä–∞–¥–∏—Ü—ñ—î—é –≤ –ö–∏—Ç–∞—ó —á–æ–ª–æ–≤—ñ–∫ –º–æ–∂–µ –≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–º—É –ø–æ—Ä—è–¥–∫—É –æ–≥–æ–ª–æ—Å–∏—Ç–∏ –ø—Ä–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É –∑–∞ —Å—ñ–º–µ–π–Ω–∏–º–∏ –æ–±—Å—Ç–∞–≤–∏–Ω–∞–º–∏. –ù–∞–∑–≤—ñ—Ç—å –æ–¥–Ω—É –∑ –ø—Ä–∏—á–∏–Ω –¥–ª—è —Ü—å–æ–≥–æ."),
    Definition("–ø—ñ–¥–ª—ñ—Ç–æ–∫", "–í –ê–≤—Å—Ç—Ä–∞–ª—ñ—ó –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö –±—ñ–ª—è –¥–µ—è–∫–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ü–µ–Ω—Ç—Ä—ñ–≤ –ø–æ –Ω–æ—á–∞—Ö —ñ –≤–µ—á–æ—Ä–∞–º–∏ –≤–∫–ª—é—á–∞—é—Ç—å –∫–ª–∞—Å–∏—á–Ω—É –º—É–∑–∏–∫—É, —â–æ–± –≤—ñ–¥–ª—è–∫–∞—Ç–∏ –∫–æ–≥–æ—Å—å. –ö–æ–≥–æ?"),
    Definition("–≤—ñ–π–Ω–∞", "–Ø–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ–º–∞—î –≤ –º–æ–≤—ñ –Ω–∞—Ä–æ–¥—ñ–≤ –ê—Ä–∫—Ç–∏–∫–∏?")
]

def GetRandomWord():
    return words[randint(0, 7)]

def GetHashWord(word):
    code = ""
    
    while (len(code) != len(word)):
        code += "#"

    return code

def hasLetter(letter, word):
    for i in word:
        if letter == i:
            return True

    return False

def hasHash(code):
    for i in code:
        if i == "#":
            return True

    return False

def EditHashWord(letter, code, word):
    newcode = list(code)
    
    i = 0
    while i < len(word):
        if letter == word[i]:
            newcode[i] = letter
        i += 1
    
    str = ''.join(newcode)
    return str

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "üëã –í—ñ—Ç–∞—é.\n–¶–µ –±–æ—Ç –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞, —è –∑–∞–¥–∞—é –≤–∞–º –ø–∏—Ç–∞–Ω–Ω—è, –∞ –≤–∏ —Ä–∞–∑–æ–º –∑ –¥—Ä—É–∑—è–º–∏ –≤—ñ–¥–≥–∞–¥—É—î—Ç–µ!")

@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, "‚ùóÔ∏è*–ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ.*\n\n–î–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ –¥–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ —É –≤–∞—à—É –≥—Ä—É–ø—É —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å –π–æ–≥–æ –∞–¥–º—ñ–Ω–æ–º, –¥–∞–ª—ñ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /game. –•—Ç–æ —ñ –≤ —è–∫—ñ–π —á–µ—Ä–∑—ñ –±—É–¥–µ –Ω–∞–∑–∏–≤–∞—Ç–∏ –ª—ñ—Ç–µ—Ä–∏ - –º–µ–Ω—ñ –ø–æ—Ñ—ñ–∫, —è –Ω–µ –∑–Ω–∞—é —è–∫ —Ü–µ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏.\n\n*–ü–∏—à—ñ—Ç—å –º–∞–ª–µ–Ω—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏!*\n*–°–ª–æ–≤–æ —á–∏ –ª—ñ—Ç–µ—Ä—É –ø–∏—à—ñ—Ç—å –ø–æ—á–∏–Ω–∞—é—á–∏ –∑—ñ –∑–Ω–∞–∫—É \"!\"*", parse_mode="Markdown")

@bot.message_handler(commands=['game'])
def start_game(message):
    if message.chat.type != "group" and message.chat.type != "supergroup":
        bot.send_message(message.chat.id, "‚ùóÔ∏è–î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ –≥—Ä—É–ø–∏, –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤–≤–µ–¥—ñ—Ç—å /help.")
    else:
        quiz = GetRandomWord()
        global code
        code = GetHashWord(quiz.word)
        global answer
        answer = quiz.word
        bot.send_message(message.chat.id, "ü§î –ü–æ—á–Ω–µ–º–æ! –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –≥—Ä—É –∑–∞–≤—á–∞—Å–Ω–æ –Ω–∞–ø–∏—à—ñ—Ç—å /stop.\n–í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–≥–∞–¥–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ:\n*" + quiz.definition + "*\n" + code, parse_mode="Markdown")
        bot.register_next_step_handler(message, members_step)

@bot.message_handler(commands=['stop'])
def stop_help(message):
    global answer
    
    bot.send_message(message.chat.id, "–í—ñ–¥–ø–æ–≤—ñ–¥—å: " + answer)
    stop_game(message)

def stop_game(message):
    bot.send_message(message.chat.id, "‚ùóÔ∏è–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def members_step(message):
    global code
    global answer

    if message.text[0] == "!":
        if message.text[1:] == answer:
            bot.reply_to(message, "ü•≥ –¢–∞–∞–∞–∫! –ú–æ–ª–æ–¥—Ü—ñ, —Ü—å–æ–º-—Ü—å–æ–º ^^")
            stop_game(message)
        elif hasLetter(message.text[1:], answer) == True:
            code = EditHashWord(message.text[1:], code, answer)
            if hasHash(code):
                bot.reply_to(message, "–Ñ —Ç–∞–∫–µ!\n" + code)
                bot.register_next_step_handler(message, members_step)
            else:
                bot.reply_to(message, "–û—Ç–æ–∂: " + code)
                bot.send_message(message.chat.id, "ü•≥ –ù—É –æ—Ç, –≤—ñ–¥—Å—Ç—Ä—ñ–ª—è–ª–∏—Å—è, –∫—Ä–∞—Å–∞–≤–∏–∏–∏–∏–∏–∏–∏–∏")
                stop_game(message)
        else:
            bot.reply_to(message, "–ù—ñ—Ç!")
            bot.register_next_step_handler(message, members_step)
    elif message.text == "/stop@quizo_ua_bot" or message.text[1:] == "/stop":
        stop_help(message)
    else:
        bot.register_next_step_handler(message, members_step)

bot.enable_save_next_step_handlers(delay=2)
bot.load_next_step_handlers()
bot.polling()